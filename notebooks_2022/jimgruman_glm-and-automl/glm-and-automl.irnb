{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.0.5"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Signal processing for classification\n\n\n\n","metadata":{}},{"cell_type":"code","source":"install.packages(c(\"embed\", \"lme4\", \"data.table\"))\n\nsuppressPackageStartupMessages({\nlibrary(tidyverse)  # metapackage of all tidyverse packages\nlibrary(broom)\nlibrary(tidymodels)\nlibrary(\"embed\")\nlibrary(\"lme4\")\nlibrary(h2o)\nlibrary(\"data.table\")\n})\n\noptions(\"h2o.use.data.table\" = TRUE)\ntheme_set(theme_minimal())\n\nlist.files(path = \"../input\")","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","execution":{"iopub.status.busy":"2022-04-28T19:57:27.901131Z","iopub.execute_input":"2022-04-28T19:57:27.904273Z","iopub.status.idle":"2022-04-28T20:01:11.232328Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df <-\n  read_csv('../input/tabular-playground-series-apr-2022/train.csv', show_col_types = FALSE) %>%\n  mutate(across(c(\"sequence\", \"subject\"), as_factor)) %>%\n  inner_join(read_csv('../input/tabular-playground-series-apr-2022/train_labels.csv', show_col_types = FALSE ) %>%\n    mutate(across(c(\"sequence\", \"state\"), as_factor)), by = \"sequence\")\n\ntest_df <- read_csv('../input/tabular-playground-series-apr-2022/test.csv', show_col_types = FALSE) %>%\n  mutate(across(c(\"sequence\", \"subject\"), as_factor)) ","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:01:11.234965Z","iopub.execute_input":"2022-04-28T20:01:11.266994Z","iopub.status.idle":"2022-04-28T20:01:25.470352Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"glimpse(test_df)\n\nglimpse(train_df)","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:01:25.473031Z","iopub.execute_input":"2022-04-28T20:01:25.474669Z","iopub.status.idle":"2022-04-28T20:01:25.525594Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Some questions to answer here:\nWhat features have missing data, and imputations may be required?\nWhat does the outcome variable look like, in terms of imbalance?","metadata":{}},{"cell_type":"code","source":"train_df %>%  \n  filter(sequence %in% c(3, 15, 15404)) %>%\n  pivot_longer(cols = starts_with(\"sensor_\")) %>%\n  ggplot(aes(step, value, color = name)) +\n  geom_line(show.legend = FALSE) +\n  facet_grid(name ~ sequence) +\n  labs(title = \"Sequence 3\")","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:01:25.529099Z","iopub.execute_input":"2022-04-28T20:01:25.530879Z","iopub.status.idle":"2022-04-28T20:01:27.628521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In the plot above, we see:\n\n- The time series have a waveform with a high frequency, where the value changes between positive and negative almost at every sampling step (each second).\n- Amplitude matters: For sequence 1 (orange), the example waveforms have a higher amplitude during the first half of the time series than during the second half. \n- Sensor_02 (the one with the discrete levels) changes level less often.\n- At least one sequence (number 15404) doesn't follow the general pattern; some of its sensors have a constant value.\n- The waveform of sensor_12 (bottommost diagram) has widely varying amplitudes.\n\n\nInsight:\n\n- Feature engineering must detect the changes in amplitude somehow.\n- Measuring the base frequency of the time series may have limited usefulness.\n- Feature engineering for sensor_02 could differ from the other sensors.\n\nWe should check for sensors which return a constant value; maybe this alone can be used as a feature.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"In this study, there are people (subjects) that were studied repeatedly in the training set. They may have outcomes through one sequence at state 0 and another sequence at state 1, and would not be considered independent. It looks like subjects in the training set do not appear in the test set.\n\n\nThese feature ideas come from https://www.kaggle.com/code/matanivanov/lgbm-with-fourier-transform  and https://www.kaggle.com/code/docxian/tpg-2022-apr-r-starter-eda-model-transparency","metadata":{}},{"cell_type":"code","source":"features <- function(df) {\n  \n  # subjects for each sequence\n  subjects <-\n    df %>% \n    select(sequence, subject) %>%  \n    distinct()\n  \n  # relative rates of appearance of each subject\n  sequence_percentile <-\n    df %>% \n    select(subject) %>%  \n    group_by(subject) %>% \n    summarize(count = n(),\n              .groups = \"drop\") %>% \n    mutate(n_sequence_percentile = 100*percent_rank(count)) %>% \n    select(-count)\n  \n  # then aggregate statistics for each sensor, for each sequence\n  sensor_aggregates <-\n    df %>% \n    select(-subject) %>% \n    pivot_longer(\n      cols = starts_with(\"sensor_\"),\n      names_to = \"sensor\",\n      names_prefix = \"sensor_\"\n    ) %>% \n    group_by(sequence, sensor) %>%  \n    summarize(\n      sensor_rms = sqrt(mean(value^2)),\n      sensor_min  = min(value),\n      sensor_max  = max(value),\n      sensor_sd   = sd(value),\n      sensor_flat = if_else(sensor_sd < 0.001, 1,0),\n      sensor_skew = timeDate::skewness(value),\n      sensor_k = timeDate::kurtosis(value),\n      .groups = \"drop\"\n    ) %>%  \n    pivot_wider(\n      names_from = sensor,\n      values_from = c(sensor_min, sensor_max, sensor_sd, sensor_k, sensor_skew, sensor_rms, sensor_flat)\n    )\n  \n  ffts <- df %>%                          \n    pivot_longer(\n      cols = starts_with(\"sensor_\"),\n      names_to = \"sensor\",\n      names_prefix = \"sensor_\"\n    ) %>% \n    select(-subject) %>% \n    arrange(sequence, step) %>% \n    pivot_wider(\n      names_from = step, \n      values_from = value, \n      names_prefix = \"step_\", \n      names_sort = TRUE\n    ) %>%\n    nest(values = starts_with(\"step_\")) %>% \n    rowwise() %>% \n    mutate(Y =  list(head(fft(unlist(values)),2)),\n           Yr = list(Re(unlist(Y))),\n           Yi = list(Im(unlist(Y))),\n           freq = list(abs(Y)),\n           mag = list(sqrt(Yr^2 + Yi^2)*2/n()),\n           phase = list(atan(Yi/Yr))) \n    \n    fft_freq <- ffts %>%\n    select(-values, -Y, -Yr, -Yi, -mag, -phase) %>% \n    unnest_wider(col = freq) %>%\n    rename_with(\n      ~ str_replace(.x, \"step\", \"freq\"), \n      starts_with(\"step_\")\n    ) %>%\n    pivot_wider(\n      values_from = starts_with(c(\"freq_\")),\n      names_from = sensor,\n      names_prefix = \"sensor_\"\n    ) \n    \n    fft_mag <- ffts %>%\n        select(sequence, mag, sensor) %>% \n    unnest_wider(col = mag) %>%\n    rename_with(\n      ~ str_replace(.x, \"step\", \"mag\"), \n      starts_with(\"step_\")\n    ) %>%\n    pivot_wider(\n      values_from = starts_with(c(\"mag_\")),\n      names_from = sensor,\n      names_prefix = \"sensor_\"\n    ) \n    \n    fft_phase <- ffts %>%\n    select(sequence, phase, sensor) %>% \n    unnest_wider(col = phase) %>%\n    rename_with(\n      ~ str_replace(.x, \"step\", \"phase\"), \n      starts_with(\"step_\")\n    ) %>%\n    pivot_wider(\n      values_from = starts_with(c(\"phase_\")),\n      names_from = sensor,\n      names_prefix = \"sensor_\"\n    ) %>%\n    select(-starts_with(\"phase_0_\"))\n      \n  # join everything together \n  engineered <-\n    fft_freq %>% \n    left_join(fft_mag,             by = c(\"sequence\")) %>%\n    left_join(fft_phase,           by = c(\"sequence\")) %>%\n    left_join(subjects,            by = c(\"sequence\")) %>% \n    left_join(sequence_percentile, by = c(\"subject\")) %>% \n    left_join(sensor_aggregates,   by = c(\"sequence\")) \n    \n  return(engineered)\n}","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:32:49.689323Z","iopub.execute_input":"2022-04-28T20:32:49.690951Z","iopub.status.idle":"2022-04-28T20:32:49.704871Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_engineered <- features(train_df)","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:32:53.683413Z","iopub.execute_input":"2022-04-28T20:32:53.685077Z","iopub.status.idle":"2022-04-28T20:35:55.488421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"With the data pivoted wider, let's look for duplicates","metadata":{}},{"cell_type":"code","source":"distinct_sequences <- train_engineered %>%\n    distinct(across(contains(c(\"freq\",\"phase\",\"mag\"))), .keep_all = TRUE) %>%\n    pull(sequence)\n\ntrain_engineered %>%\n    filter( !sequence %in% distinct_sequences)","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:04:26.655757Z","iopub.execute_input":"2022-04-28T20:04:26.657871Z","iopub.status.idle":"2022-04-28T20:04:26.831405Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There really aren't so many here that the training would be affected. It is interesting to me how they all are state 0.","metadata":{}},{"cell_type":"code","source":"train_engineered %>%  \n  select(state, starts_with(\"sensor_k\")) %>%  \n  pivot_longer(starts_with(\"sensor_k\")) %>%  \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)\n\ntrain_engineered %>%  \n  select(state, starts_with(\"sensor_sd\")) %>%  \n  pivot_longer(starts_with(\"sensor_sd\")) %>% \n  mutate(value = log(value)) %>%  \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name) +\n  labs(title = \"log transformed standard deviations\")\n\ntrain_engineered %>%  \n  select(state, starts_with(\"sensor_skew\")) %>%  \n  pivot_longer(starts_with(\"sensor_skew\")) %>% \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)\n\ntrain_engineered %>% \n  select(state, starts_with(\"sensor_min\")) %>%  \n  pivot_longer(starts_with(\"sensor_min\")) %>%  \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)\n\ntrain_engineered %>% \n  select(state, starts_with(\"sensor_max\"))%>% \n  pivot_longer(starts_with(\"sensor_max\")) %>% \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)\n\ntrain_engineered %>% select(state, starts_with(\"freq_\")) %>%\n  pivot_longer(starts_with(\"freq_\")) %>%\n  ggplot(aes(base::log(value+1), fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name) +\n  labs(title = \"log transformed fft frequencies\")\n\ntrain_engineered %>% select(state, starts_with(\"mag_\")) %>% \n  pivot_longer(starts_with(\"mag_\")) %>% \n  ggplot(aes(base::log(value+1), fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name) +\n  labs(title = \"log transformed fft magnitudes\")\n\ntrain_engineered %>% select(state, starts_with(\"phase_\")) %>% \n  pivot_longer(starts_with(\"phase_\")) %>% \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)\n\ntrain_engineered %>% select(state, starts_with(\"sensor_rms\")) %>% \n  pivot_longer(starts_with(\"sensor_rms\")) %>% \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)\n\ntrain_engineered %>% select(state, starts_with(\"sensor_flat\")) %>% \n  pivot_longer(starts_with(\"sensor_flat\")) %>% \n  ggplot(aes(value, fill = state)) + \n  geom_histogram(bins = 30) + \n  facet_wrap( ~ name)","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:39:36.737314Z","iopub.execute_input":"2022-04-28T20:39:36.739499Z","iopub.status.idle":"2022-04-28T20:40:00.443702Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_engineered %>% \n  select(where(is.numeric)) %>%  \n  corrr::correlate() %>% \n  corrr::shave() %>% \n  corrr::rplot() +\n  theme(axis.text.x = element_blank())\n","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:04:49.839447Z","iopub.execute_input":"2022-04-28T20:04:49.841017Z","iopub.status.idle":"2022-04-28T20:04:52.858397Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"set.seed(123)\n\nbio_split <- train_engineered %>%\n    distinct(subject) %>%\n    slice_sample(prop = 0.9)\n\nbio_train <- train_engineered %>%\n    filter(subject %in% bio_split$subject)\n\nbio_test <- train_engineered %>%\n    filter(!subject %in% bio_split$subject)\n","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:41:35.81761Z","iopub.execute_input":"2022-04-28T20:41:35.820919Z","iopub.status.idle":"2022-04-28T20:41:35.921659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_spec_glm <- logistic_reg(\n    mode   = \"classification\",\n    engine = \"glm\"\n)\n\nrecipe_spec_linear <-\n  recipe(state ~ ., bio_train) %>% \n  step_novel(subject) %>%\n  step_unknown(subject) %>%\n  step_lencode_mixed(subject, outcome = vars(state)) %>%\n  update_role(sequence, new_role = \"id\") %>%  \n  step_impute_median(all_numeric_predictors()) %>%  \n  step_log(starts_with(\"freq\"), offset = 1) %>% \n  step_log(starts_with(\"mag\"), offset = 1) %>% \n  step_log(starts_with(\"sensor_sd\"), offset = 1) %>%  \n  step_log(starts_with(\"sensor_rms\"), offset = 0.1) %>%\n  step_YeoJohnson(starts_with(\"sensor_max\")) %>% \n  step_YeoJohnson(starts_with(\"sensor_k\")) %>% \n  step_YeoJohnson(starts_with(\"sensor_min\")) %>% \n  step_nzv()\n\nworkflow_linear <- workflow() %>%\n    add_model(model_spec_glm) %>%\n    add_recipe(recipe_spec_linear,\n              blueprint = hardhat::default_recipe_blueprint(allow_novel_levels = TRUE))\n\nworkflow_linear_fit <- workflow_linear %>%\n    fit(bio_train)\n\nworkflow_linear_fit","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:41:38.922919Z","iopub.execute_input":"2022-04-28T20:41:38.9261Z","iopub.status.idle":"2022-04-28T20:41:48.994485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"vip::vip(\n  extract_fit_parsnip(workflow_linear_fit), \n  geom = \"point\", num_features = 20)","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:41:54.132341Z","iopub.execute_input":"2022-04-28T20:41:54.135423Z","iopub.status.idle":"2022-04-28T20:41:54.459189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"augment(workflow_linear_fit, bio_test) %>%  \n  conf_mat(truth = state, estimate = .pred_class) %>% \n  autoplot(type = \"heatmap\")\n\naugment(workflow_linear_fit, bio_test) %>%  \n  roc_auc(truth = state, estimate = .pred_0) ","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:42:10.419843Z","iopub.execute_input":"2022-04-28T20:42:10.422403Z","iopub.status.idle":"2022-04-28T20:42:11.454073Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The GLM result is suprisingly good for a model with features that are often correlated. Let's have a look at a complex ensemble model with H2O's automl.","metadata":{}},{"cell_type":"code","source":"recipe_spec_automl <-\n  recipe(state ~ ., bio_train) %>% \n  step_novel(subject) %>%\n  step_unknown(subject) %>%\n  step_lencode_mixed(subject, outcome = vars(state)) %>%\n  update_role(sequence, new_role = \"id\") %>%  \n  step_impute_median(all_numeric_predictors()) %>%  \n  step_log(starts_with(\"freq\"), offset = 1) %>% \n  step_log(starts_with(\"mag\"), offset = 1) %>% \n  step_log(starts_with(\"sensor_sd\"), offset = 1) %>%  \n  step_log(starts_with(\"sensor_rms\"), offset = 0.1) %>%\n  step_YeoJohnson(starts_with(\"sensor_max\")) %>% \n  step_YeoJohnson(starts_with(\"sensor_k\")) %>% \n  step_YeoJohnson(starts_with(\"sensor_min\")) %>% \n  step_nzv()\n\n","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:42:22.872104Z","iopub.execute_input":"2022-04-28T20:42:22.874346Z","iopub.status.idle":"2022-04-28T20:42:22.95856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"h2o.init()","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:42:29.877709Z","iopub.execute_input":"2022-04-28T20:42:29.879862Z","iopub.status.idle":"2022-04-28T20:42:30.016315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_h2o <- recipe_spec_automl %>% prep() %>% bake(new_data = features(train_df)) %>% as.h2o()\ntest_h2o <- recipe_spec_automl %>% prep() %>% bake(new_data = features(test_df)) %>% as.h2o()\n\ny <- \"state\"\nx <- setdiff(names(as.data.frame(train_h2o)), c(y, \"sequence\"))","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:43:08.562868Z","iopub.execute_input":"2022-04-28T20:43:08.564674Z","iopub.status.idle":"2022-04-28T20:48:08.302966Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_automl <- h2o.automl(\n\n    x = x,\n    y = y,\n    training_frame = train_h2o,\n    \n    nfolds = 5,\n    max_models = 22,               \n    seed = 2022,\n    sort_metric = \"AUC\"\n    \n)\n","metadata":{"execution":{"iopub.status.busy":"2022-04-28T20:49:11.175785Z","iopub.execute_input":"2022-04-28T20:49:11.177694Z","iopub.status.idle":"2022-04-28T21:37:31.900321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"h2o.get_leaderboard(model_automl, extra_columns = \"ALL\")\n\nbest_h2o_model <- h2o.get_best_model(model_automl)\n\nh2o.performance(best_h2o_model)","metadata":{"execution":{"iopub.status.busy":"2022-04-28T21:39:40.190624Z","iopub.execute_input":"2022-04-28T21:39:40.193481Z","iopub.status.idle":"2022-04-28T21:40:25.725885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_sub_h2o <- h2o.predict(object = best_h2o_model, newdata = test_h2o) \n\ndf_sub_h2o\n\nsummary(df_sub_h2o$p1, exact_quantiles = TRUE)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_sub <- data.frame(\n   features(test_df)[, \"sequence\"],\n   as.data.frame(df_sub_h2o[,\"p1\"]) ) %>%\n   rename(state = p1)\n\nsummary(df_sub$state)\n\nhead(df_sub)\n\nggplot(df_sub, aes(state)) +\n   geom_histogram(bins = 30) \n\ndim(df_sub)\ndim(read_csv('../input/tabular-playground-series-apr-2022/sample_submission.csv', show_col_types = FALSE ))\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"write_csv(df_sub, file='submission.csv')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}