{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.0.5"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Loading Packages","metadata":{}},{"cell_type":"code","source":"library(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(lubridate)","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","execution":{"iopub.status.busy":"2022-05-07T19:38:42.467515Z","iopub.execute_input":"2022-05-07T19:38:42.469151Z","iopub.status.idle":"2022-05-07T19:38:42.487337Z"},"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Reading in file and viewing structure","metadata":{}},{"cell_type":"code","source":"df <- read_xlsx(\"../input/kards-ww2-card-game-april/Kards4_22.xlsx\", col_names = T)\n\nstr(df)","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.508773Z","iopub.execute_input":"2022-05-07T19:38:42.510282Z","iopub.status.idle":"2022-05-07T19:38:42.569804Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Wrangling\nConverting deck column to \"factor\" data type and\\\nViewing levels","metadata":{}},{"cell_type":"code","source":"df$Deck <- as.factor(df$Deck)\nas.list(levels(df$Deck))","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.572071Z","iopub.execute_input":"2022-05-07T19:38:42.573388Z","iopub.status.idle":"2022-05-07T19:38:42.59161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Changing incorrectly entered deck names ","metadata":{}},{"cell_type":"code","source":"df$Deck <- recode_factor(df$Deck, air= 'Air', Mobilze = \"Mobilize\")\nas.list(levels(df$Deck)) ","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.611317Z","iopub.execute_input":"2022-05-07T19:38:42.612782Z","iopub.status.idle":"2022-05-07T19:38:42.630964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\nMaking column names uniform and easy to work with","metadata":{}},{"cell_type":"code","source":"df <- janitor::clean_names(df)\n\nhead(df)","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.633182Z","iopub.execute_input":"2022-05-07T19:38:42.634552Z","iopub.status.idle":"2022-05-07T19:38:42.677306Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Converting datetime to time and\\\nAdding weekday column","metadata":{}},{"cell_type":"code","source":"df$time <- format(df$time, format = \"%H:%M:%S\")\n\ndf <- df %>% mutate(weekday = wday(df$date))\n\nhead(select(df, date, time, weekday))","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.679548Z","iopub.execute_input":"2022-05-07T19:38:42.680946Z","iopub.status.idle":"2022-05-07T19:38:42.712683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Aggregate Data for Graphing\n### Creating dataframe 1: results_by_deck","metadata":{}},{"cell_type":"code","source":"results_by_deck <- df %>% group_by(deck, result) %>% summarize(number = n())\n\nresults_by_deck","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.714912Z","iopub.execute_input":"2022-05-07T19:38:42.716219Z","iopub.status.idle":"2022-05-07T19:38:42.767787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Pivoting wins and losses into their own columns in preparation of calculation","metadata":{}},{"cell_type":"code","source":"results_by_deck <- results_by_deck %>% pivot_wider(names_from = result, values_from = number)\n\nresults_by_deck","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.77005Z","iopub.execute_input":"2022-05-07T19:38:42.771356Z","iopub.status.idle":"2022-05-07T19:38:42.8121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\nReplacing NA loss and win values with zeroes and\\\nFiltering out observations where deck is NA","metadata":{}},{"cell_type":"code","source":"results_by_deck <- results_by_deck %>% mutate(win = replace(win, is.na(win), 0)\n                                              , loss = replace(loss, is.na(loss), 0)) %>%\n                                              filter(!is.na(deck))\n\nresults_by_deck","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.8143Z","iopub.execute_input":"2022-05-07T19:38:42.815605Z","iopub.status.idle":"2022-05-07T19:38:42.843849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Adding games_played and winrate columns and\\\nRounding winrate percentage","metadata":{}},{"cell_type":"code","source":"results_by_deck <- results_by_deck %>%\n  mutate(games_played = win + loss , winrate = win / (loss + win))\n\nresults_by_deck$winrate <- format(round(results_by_deck$winrate, 2), nsmall =2)\n\nresults_by_deck","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.846142Z","iopub.execute_input":"2022-05-07T19:38:42.84749Z","iopub.status.idle":"2022-05-07T19:38:42.876198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Removing empty column and\\\nViewing our finished data frame sorted by winrate in descending order","metadata":{}},{"cell_type":"code","source":"results_by_deck <- select(results_by_deck, -4)\n\nresults_by_deck %>% arrange(desc(winrate))","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.878461Z","iopub.execute_input":"2022-05-07T19:38:42.879786Z","iopub.status.idle":"2022-05-07T19:38:42.908307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Creating dataframe 2: results_by_weekday \nNote: This is all very similar to creating the dataframe 1 in terms of the functions used, so I will exclude the output of each individual step, and rather just show results of the final data frame.\n\nNote: Weekday in R is represented by Sunday = 1, Monday = 2, etc. ","metadata":{}},{"cell_type":"code","source":"results_by_weekday <- df %>% group_by(weekday, result) %>% summarise(number = n())\n\nresults_by_weekday <- pivot_wider(results_by_weekday, names_from = result, values_from = number)\n\nresults_by_weekday <- results_by_weekday %>% select(-4) %>% mutate(games_played = loss + win, winrate = format(round(win/games_played, 2), nsmall = 2))\n\nresults_by_weekday","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.910577Z","iopub.execute_input":"2022-05-07T19:38:42.91187Z","iopub.status.idle":"2022-05-07T19:38:42.989728Z"},"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Visualization\nPlotting dataframe #1: results_by_deck","metadata":{}},{"cell_type":"code","source":"ggplot(data = results_by_deck, aes(y=winrate, x= games_played, color = deck)) +\n  geom_point(size = 5) +\n  labs(title = \"Win % vs. Games Played\",\n       x = \"Games Played\",\n       y = \"Win %\", subtitle = \"by Deck\") +\n  theme(plot.title = element_text(size = 25, hjust =.5), \n        axis.title.x = element_text(size = 16, face = \"bold\"), \n        plot.subtitle = element_text(size = 14, hjust = .5), \n        axis.title.y = element_text(size = 16, face = \"bold\"))","metadata":{"execution":{"iopub.status.busy":"2022-05-07T19:38:42.992024Z","iopub.execute_input":"2022-05-07T19:38:42.993354Z","iopub.status.idle":"2022-05-07T19:38:43.376957Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can see our \"Artillery\" deck is not just our favorite, and most played for the month,\nbut it is also one of our highest win rates, which makes it the safe and consistent pick moving into next months ladder.\\\nThe other standout deck is \"Humber\" with a 75% percent win rate. We just need to play more games with this deck to verify it's consistency. Frontline jsut has too few games played to know if it's high win rate is reliable. \n","metadata":{}}]}