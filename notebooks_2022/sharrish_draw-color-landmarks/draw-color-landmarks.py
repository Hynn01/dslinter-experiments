#!/usr/bin/env python
# coding: utf-8

# # üé® –†–∏—Å—É–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –ª–∏—Ü–∞. –°–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ —á–∞—Å—Ç—è–º –ª–∏—Ü–∞.
# * –í —ç—Ç–æ–º –Ω–æ—É—Ç–±—É–∫–µ –º—ã –æ—Ç–æ–±—Ä–∞–∑–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –ª–∏—Ü–µ –ë—Ä—ç–¥–∞ –ü–∏—Ç—Ç–∞, –†–æ–±–µ—Ä—Ç–∞ –î–µ –ù–∏—Ä–æ –∏ –î—É—ç–π–Ω –î–∂–æ–Ω—Å–æ–Ω–∞.
# * –¢–∞–∫–∂–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–µ–∫ –∏–∑  landmarks –∏ —á–∞—Å—Ç—è–º –ª–∏—Ü–∞.

# In[ ]:


import os
import cv2
import copy
import torch
import numpy as np
import matplotlib.pyplot as plt

PATH_DATA = "/kaggle/input/vkcv2022-contest-01-facial-landmarks/contest01_data/"
PATH_TRAIN = os.path.join(PATH_DATA, "train")
PATH_TRAIN_IMAGE = os.path.join(PATH_TRAIN, "images")
PATH_TRAIN_LANDMARK = os.path.join(PATH_TRAIN, "landmarks.csv")


# In[ ]:


def draw_landmarks(img, landmarks):
    """
    –†–∏—Å—É–µ—Ç —Ü–≤–µ—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –ª–∏—Ü–µ.
    landmarks: np.array.
    """
    image = np.copy(img) # —á—Ç–æ–±—ã –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–ª–æ—Å—å
    for i, point in enumerate(landmarks):
        if 0 <= i and i < 273:    # –û–í–ê–õ –õ–ò–¶–ê
            color = (0, 0, 255)
        elif 273 <= i and i < 401: # –ë–†–û–í–ò
            color = (128, 0, 0)
        elif 401 <= i and i < 587: # –ù–û–°
            color = (255, 255, 0)
        elif 587 <= i and i < 841: # –ì–õ–ê–ó–ê
            color = (0, 255, 255)
        elif 841 <= i and i < 969: # –†–û–¢
            color = (255, 0, 0)
        elif 969 <= i < 971: # –ó–†–ê–ß–ö–ò
            color = (0, 0, 0)
        x, y = point.astype(np.int32)
        cv2.circle(img=image, center=(x, y), radius=1, color=color, thickness=-1)
    return image


# –ó–∞–¥–∞–µ–º –ø—É—Ç–∏ –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏–º –Ω–∞—Ä–∏—Å–æ–≤—Ç—å —Ç–æ—á–∫–∏:

# In[ ]:


robert_de_niro_img_path = "/kaggle/input/vkcv2022-contest-01-facial-landmarks/contest01_data/train/images/3ce64cc92545b9c33424f2ef65bb86f0.jpg"
brad_pitt_img_path = "/kaggle/input/vkcv2022-contest-01-facial-landmarks/contest01_data/train/images/d5a277caf04a277113cbdf6590bb1f6f.jpg"
dwayne_johnson_img_path = "/kaggle/input/vkcv2022-contest-01-facial-landmarks/contest01_data/train/images/acf8a79eb7f4c7709c8b9b22ad7dcf91.jpg"

train_images_for_visualization_path = set([
    robert_de_niro_img_path,
    brad_pitt_img_path,
    dwayne_johnson_img_path,
])


# –ù–∞—Ö–æ–¥–∏–º,`img` –∏ `landmarks` —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—É—Ç—è–º:

# In[ ]:


train_samples_for_visualization = []
img_paths = []
img_landmarks = []

with open(PATH_TRAIN_LANDMARK, "rt") as fp:
    for i, line in enumerate(fp):
        if i == 0:
            continue  # skip header
        
        elements = line.strip().split("\t")
        image_name = os.path.join(PATH_TRAIN_IMAGE, elements[0])
        
        if image_name in train_images_for_visualization_path:
            
            img_paths.append(image_name)
            
            landmarks = list(map(np.int32, elements[1:]))
            landmarks = np.array(landmarks, dtype=np.int32).reshape((len(landmarks) // 2, 2))
            
            img_landmarks.append(landmarks)

img_landmarks = torch.as_tensor(img_landmarks)

for i, img_name in enumerate(img_paths):
    sample = {}
    
    image = cv2.imread(img_name)      # —á–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # –ø–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    
    sample["image"] = image
    sample["landmarks"] = img_landmarks[i]
    
    train_samples_for_visualization.append(sample)


# –†–∏—Å—É–µ–º:

# In[ ]:


NUM_COLS = 3
NUM_ROWS = 1

plt.figure(figsize=(25, NUM_ROWS * 8))

for i in range(len(train_samples_for_visualization)):
    sample = copy.deepcopy(train_samples_for_visualization[i])
    img_tmp = draw_landmarks(sample["image"], np.array(sample["landmarks"]))
    plt.subplot(NUM_ROWS, NUM_COLS, i + 1)
    plt.imshow(img_tmp)

plt.tight_layout() # –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ä–∏—Å—É–Ω–∫–∞–º–∏
plt.show()


# In[ ]:




